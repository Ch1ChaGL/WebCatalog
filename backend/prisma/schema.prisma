generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId   String     @id @map("role_id")
  roleName String     @map("role_name")
  roleUser RoleUser[]
}

model SocialNetwork {
  socialNetworkId   Int                 @id @default(autoincrement()) @map("social_network_id")
  socialNetworkName String              @map("social_network_name")
  iconPath          String              @map("social_network_icon_path")
  userSocialNetwork UserSocialNetwork[]
}

model User {
  userId            Int                 @id @default(autoincrement()) @map("user_id")
  nickname          String              @unique @map("user_nickname")
  firstName         String?             @map("first_name")
  lastName          String?             @map("last_name")
  email             String
  password          String
  banned            Boolean             @default(false)
  banReason         String?             @map("ban_reason")
  roleUser          RoleUser[]
  userSocialNetwork UserSocialNetwork[]
  userPost          UserPost[]
  comment           Comment[]
  rating            Rating[]
}

model RoleUser {
  roleId String @map("role_id")
  userId Int    @map("user_id")
  Role   Role   @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  User   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([roleId, userId])
}

model UserSocialNetwork {
  userId          Int           @map("user_id")
  socialNetworkId Int           @map("social_network_id")
  link            String
  SocialNetwork   SocialNetwork @relation(fields: [socialNetworkId], references: [socialNetworkId])
  User            User          @relation(fields: [userId], references: [userId])

  @@id([userId, socialNetworkId])
}

model Category {
  categoryId   Int            @id @default(autoincrement()) @map("category_id")
  categoryName String         @map("category_name")
  categoryPost CategoryPost[]
}

model CategoryPost {
  categoryId Int      @map("category_id")
  postId     Int      @map("post_id")
  Category   Category @relation(fields: [categoryId], references: [categoryId])
  Post       Post     @relation(fields: [postId], references: [postId])

  @@id([categoryId, postId])
}

model Post {
  postId       Int            @id @default(autoincrement()) @map("post_id")
  postName     String         @map("post_name")
  banned       Boolean
  banReason    String?        @map("ban_reason")
  description  String
  categoryPost CategoryPost[]
  userPost     UserPost[]
  postImage    PostImage[]
  comment      Comment[]
  rating       Rating[]
  link         String
}

model UserPost {
  postId Int  @map("post_id")
  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [userId])
  Post   Post @relation(fields: [postId], references: [postId])

  @@id([postId, userId])
}

model PostImage {
  postImageId Int    @id @default(autoincrement()) @map("post_image_id")
  postId      Int    @map("post_id")
  filePath    String @map("file_path")
  order       Int
  Post        Post   @relation(fields: [postId], references: [postId])
}

model Comment {
  commentId   Int    @id @default(autoincrement()) @map("comment_id")
  userId      Int    @map("user_id")
  postId      Int    @map("post_id")
  commentText String @map("comment_text")
  User        User   @relation(fields: [userId], references: [userId])
  Post        Post   @relation(fields: [postId], references: [postId])
}

model Rating {
  userId Int  @map("user_id")
  postId Int  @map("post_id")
  rating Int
  User   User @relation(fields: [userId], references: [userId])
  Post   Post @relation(fields: [postId], references: [postId])

  @@id([userId, postId])
}
